<?xml version="1.0"?>
<project name="Atrox" default="" basedir=".">
	
	<property file="build.properties"  />

	<tstamp>
	 <format property="date" pattern="%d %b %Y" />
	 <format property="time" pattern="%R %Z" />
	  <format property="buildtime" pattern="%a, %d %b %Y, %H:%M"/>
	</tstamp>
	
	<fileset dir="${framework.path}" id="framework-php">
    <include name="**/*.php" />
  </fileset>

	<fileset dir="${test.path}" id="test-php">
    <include name="**/*.php" />
  </fileset>

	<target name="check">
	</target>

	<target name="clean" depends="cleanDocumentPath"
		description="Delete files created by the build processes">
		<echo>Delete files created by build processes</echo>
	</target>
	
	<target name="cleanDocumentPath">
		<delete dir="${document.path}" includeemptydirs="true" verbose="false" failonerror="true" />
	</target>
	
	<target name="test">
	</target>
	
	<target name="document" depends="cleanDocumentPath" 
		description="Builds the documentation for this project">
		<mkdir dir="${document.path}" />
		
		<phpdoc title="${phing.project.name} API Documentation"
		  destdir="${document.path}"
		  parseprivate="true"
		  quiet="true"
		  output="HTML:frames:DOM/earthli">
		  <fileset refid="framework-php" />
		</phpdoc>
	</target>

	<target name="checkStandards" 
		description="Check all of the code meets the coding standards"
		depends="checkFrameworkStandards, checkTestStandards">
	</target>
	
	<target name="checkFrameworkStandards">
		<phpcodesniffer
		  standard="/var/application/Clock/CodeSniffer/Clock"
		  format="report"
		  file="${framework.path}"
		  allowedFileExtensions="php" 
		  haltonerror="true" />
	</target>
	
	<target name="checkTestStandards">
		<phpcodesniffer
			standard="/var/application/Clock/CodeSniffer/Clock"
		  format="summary"
		  file="${test.path}"
		  allowedFileExtensions="php" 
		  haltonerror="true" />
	</target>
	
	<target name="checkFileStandards">
		<phpcodesniffer
			standard="/var/application/Clock/CodeSniffer/Clock"
		  format="report"
		  file="${path}"
		  allowedFileExtensions="php" 
		  haltonerror="true" />
	</target>
	
	<target name="build">
	</target>
	
	<target name="validate" 
		description="Check all of the code syntax is valid" 
		depends="validateFramework, validateTest">
	</target>
	
	<target name="validateFramework">	
		<phplint>
		  <fileset refid="framework-php" />
		</phplint>
	</target>

	<target name="validateTest">	
		<phplint>
		  <fileset refid="test-php" />
		</phplint>
	</target>
	
	<target name="reloadApache">
		<echo message="Reloading Apache Configuration" />
		<exec command="${apache.path} reload" checkreturn="true" />
	</target>

	<target name="setup">
		<echo message="Setting up ${project.name}" />
		
		<available file="${project.basedir}/${vhost.path}.template" property="vhost.template.exists" value="1" />
		
		<if>
			<equals arg1="${vhost.template.exists}" arg2="1" />
			<then>
				<copy file="${project.basedir}/${vhost.path}.template" tofile="${project.basedir}/${vhost.path}" overwrite="true" />
				<echo message="Creating '${project.basedir}/${vhost.path}' from template" />
			</then>
		</if>
		
		<available file="${bootstrap.path}.template" property="bootstrap.template.exists" value="1" />
		<if>
			<equals arg1="${bootstrap.template.exists}" arg2="1" />
			<then>
				<copy file="${project.basedir}/${bootstrap.path}.template" tofile="${project.basedir}/${bootstrap.path}"  overwrite="true" />
				<echo message="Creating '${project.basedir}/${bootstrap.path}' from template" />
			</then>
		</if>
		
		<reflexive>
			<fileset dir="${project.basedir}">
				<include name="${vhost.path}" />
				<include name="${bootstrap.path}" />
				<include name="${bootstrap.path}" />
			</fileset>
			<filterchain>
				<replacetokens>
					<token key="ProjectName" value="${phing.project.name}" />
					<token key="ProjectPath" value="${project.basedir}" />
					<token key="SiteDomain" value="${site.domain}" />
					<token key="EmailDeveloper" value="${email.developer}" />
					<token key="DatabaseHost" value="${database.host}" />
					<token key="DatabasePort" value="${database.port}" />
					<token key="DatabaseName" value="${database.name}" />
				</replacetokens>
			</filterchain>
		</reflexive>

		<echo message="${phing.project.name}" />
		<exec command="ln -sf '${project.basedir}/${vhost.path}' '${apache.include.path}/${site.domain}.conf'" />
		
		<phingcall target="reloadApache" />
		
	</target>

	<target name="setupDevelopment" description="Sets up a development version of the project on your local Furnace">
		<phingcall target="setup">
			<property name="site.domain" value="${development.site.domain}" />
			<property name="site.path" value="${site.path}" />
			<property name="email.support" value="${development.email.support}" />
			<property name="email.developer" value="${development.email.developer}" />
			<property name="database.host" value="${development.database.host}" />
			<property name="database.port" value="${development.database.port}" />
			<property name="database.name" value="${development.database.name}" />
		</phingcall>
	</target>
			
	<target name="updateDatabase">
	</target>
	    
	<target name="parseBuildVariables">
	
		<echo msg="Updating build variables..." />
		
		<propertyPrompt propertyname="versionNumber" defaultValue="1" promptText="Please enter the version number you are deploying?" />
				
		<reflexive>
			<fileset dir="${path}">
				<include name="**/*.css"/>
		    <include name="**/*.js"/>
		    <include name="**/*.html"/>
		    <include name="**/*.php"/>
		    <include name="**/*.htc"/>
		    <include name="**/*.tpl"/>
		  </fileset>
			<filterchain>
	  		<replacetokens begintoken="{" endtoken="}">
    			<token key="VERSION-NUMBER" value="${versionNumber}" />
    			<token key="DATE-STAMP" value="${date}" />
    			<token key="TIME-STAMP" value="${time}" />
    		</replacetokens>
    	</filterchain>
		</reflexive>
	</target>
	
	
	<target name="dependancies" depends="customTasks">
		<dependency type="php" version="5.2.6" />
	</target>

	<target name="customTasks">
		<adhoc-task name="dependency"><![CDATA[
class Dependency extends Task {
	private $name;
	private $type;
	private $include;
	private $version;
	private $install;

	public function setType($type) {
		$this->type = $type;
	}
	
	public function setInclude($include) {
		$this->include = $include;
	}

	public function setVersion($version) {
		$this->version = $version;
	}

	public function setInstall($install) {
		$this->install = $install;
	}

	public function setName($name) {
		$this->name = $name;
	}

	protected function check() {
		switch ($this->type) {
			case "php":
				$this->log("Checking {$this->type} is at least '{$this->version}': ");
				return version_compare(PHP_VERSION, $this->version) >= 0;
			case "class":
				$this->log("Checking {$this->type} '{$this->name}': ");
				@include($this->include);
				return class_exists($this->name, true);
			case "function":
				$this->log("Checking {$this->type} '{$this->name}': ");
				@include($this->include);
				return function_exists($this->name);
			case "file":
				$this->log("Checking {$this->type} '{$this->name}': ");
				return file_exists($this->name);
			case "network":
				$this->log("NOT IMPLEMENTED");
				return false;
		}
		return false;
	}

	public function main() {
		if ($this->check()) {
			$this->log("Success");
		} else {
			$this->log("Failed");
			if (isset($this->install)) {
				$this->log("Run the following to install:\n\t{$this->install}\n");
			} else {
				//echo "\n";
			}
			throw new BuildException("Failed");
		}
	}
}
	]]></adhoc-task>
	</target>
</project>